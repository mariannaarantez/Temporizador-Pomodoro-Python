import tkinter as tk
import math

# O modulo winsound só funciona no Windows. Para outros teria q ser bibliotecas como 'playsound' ou 'pygame'.

import winsound 
def tocar_som_alarme():
        winsound.Beep(1000, 500) # Tocar um alerta sonoro depois de cada ciclo
        winsound.Beep(1000, 500)#  (Frequencia Hz, Tempo  milissegundos)


# Definições de tempo do trabalho, pausa longe e curta
Min_Trabalho = 1
Min_PausaCurta = 1
Min_PausaLonga = 1
Marcador = "X-"

reps = 0    #todas as variaveis que precisam pra controlar o timer
timer = None
ciclos_completos = 0
tempo_total_passado = 0
cronometro_total_id = None
cronometro_iniciado = False



def formatar_tempo_total(segundos):
    # formatação do timer 
    horas = segundos // 3600
    minutos = (segundos % 3600) // 60
    segs = segundos % 60
    return f"{horas:02d}:{minutos:02d}:{segs:02d}"

def atualizar_cronometro_total():
    # atualiza o timer a cada segundo que passa
    global tempo_total_passado, cronometro_total_id
    tempo_total_passado += 1
    cronometro_total_label.config(text=f"Tempo Total: {formatar_tempo_total(tempo_total_passado)}")
    cronometro_total_id = window.after(1000, atualizar_cronometro_total)

def reset_timer():
    """Para o timer e redefine tudo pra começar dnv."""
    global reps, timer, ciclos_completos, cronometro_total_id, tempo_total_passado, cronometro_iniciado
    if timer:
        window.after_cancel(timer)
        timer = None
    if cronometro_total_id:
        window.after_cancel(cronometro_total_id)
        cronometro_total_id = None

    reps = 0
    ciclos_completos = 0
    tempo_total_passado = 0    #redefine as variaveis
    cronometro_iniciado = False

    label_timer.config(text="Pomodoro", fg="#e0e0e0")
    canvas.itemconfig(timer_text, text="00:00")            #redefine os textos
    ciclos_label.config(text="Ciclos: 0")
    marcadores_label.config(text="") # Limpa as marcas de progresso
    cronometro_total_label.config(text="Tempo Total: 00:00:00")
    botao_comeco.config(state="normal")


def start_timer():
    # Começa o cronometro e o ciclo
    global reps, cronometro_iniciado
    
    # impede que mais de um cronometro geral seja iniciado
    if not cronometro_iniciado:
        atualizar_cronometro_total()      # atualiza o cronometro geral
        cronometro_iniciado = True

    reps += 1
    
    # Converte os minutos de cada ciclo pra segundos no timer
    TimerTrabalho = Min_Trabalho * 10
    TimerPausaCurta = Min_PausaCurta * 5
    TimerPausaFinal = Min_PausaLonga * 15
    
    botao_comeco.config(state="disabled") # Tira botão de começar, impede mais de um cronometroiniciado

    if reps % 8 == 0:  # 8ª repetição é de pausa longa
        label_timer.config(text="Pausa Longa", fg="#005f99") #muda o texto pra pausa longa e pra azul
        count_down(TimerPausaFinal)
    elif reps % 2 == 0:  # Reps pares (2, 4, 6) são de pausas curtas
        sessoes_pausa = reps // 2
        label_timer.config(text=f"Pausa Curta {sessoes_pausa}/3", fg="#00a64d")# muda o texto pra pausa curta em verde
        count_down(TimerPausaCurta)
    else:  # Reps impares são de trabalho
        sessoes_trabalho = (reps // 2) + 1
        label_timer.config(text=f"Trabalho {sessoes_trabalho}/4", fg="#d62828") # muda o texto pra trabalho em vermelho
        count_down(TimerTrabalho)

def mostrar_notificacao(mensagem):
    notif_window = tk.Toplevel(window) # pra mostrar uma notificação a cada ciclo
    notif_window.title("Notificação")
    notif_window.config(bg="#2a2a3a", padx=20, pady=20)
    notif_window.overrideredirect(True) # Remove a barra de título e bordas
    notif_window.attributes("-topmost", True) # Mantém a janela no topo

    label = tk.Label(notif_window, text=mensagem, font=("Arial", 14, "bold"), fg="white", bg="#2a2a3a")
    label.pack(padx=10, pady=10)
    


    # arruma notificação
    main_x = window.winfo_x()
    main_y = window.winfo_y()
    main_width = window.winfo_width()
    main_height = window.winfo_height()
    notif_width = notif_window.winfo_width()
    notif_height = notif_window.winfo_height()
    pos_x = main_x + (main_width ) - (notif_width)
    pos_y = main_y + (main_height) - (notif_height)
    notif_window.geometry(f"+{pos_x}+{pos_y}")

    # Fecha a notificação dps de 3,5 segundos (3500 ms)
    notif_window.after(3500, notif_window.destroy)

def count_down(count):
    # timer de contagem e atualiza o display de ciclo
    global timer, ciclos_completos, reps
    
    # calcula os minutos e segundos pro timer
    minutos = math.floor(count / 60)
    segundos = count % 60
    
    # Formatação dos números pra ter 2 digito só
    canvas.itemconfig(timer_text, text=f"{minutos:02d}:{segundos:02d}")
    
    if count > 0:
        timer = window.after(1000, count_down, count - 1)
    else:
        # Acabo o tempo, toca alarme notifiação e inicia prox ciclo
        tocar_som_alarme()
        timer = None 

        # Coloca uma marca depois de cada trabalho concluído
        if reps % 2 != 0:
            sessoes_trabalho_concluidas = (reps // 2) + 1
            marcadores_label.config(text= Marcador * sessoes_trabalho_concluidas)
        
        mensagem = ""
        if reps % 2 == 0: # Msg que aparece quando terminar uma pausa 
            mensagem = "Ta achando que a vida é um mel? Bora, foco"
        else: # msg que aparece quando acaba o tempo de trabalho
            mensagem = "Mandou bem, pode ir descansar um pouco"

        mostrar_notificacao(mensagem)
        
        # Atualiza o contador de ciclos e reseta repetições após a pausa longa
        if reps % 8 == 0:
            ciclos_completos += 1
            ciclos_label.config(text=f"Ciclos: {ciclos_completos}")
            marcadores_label.config(text="") # Reseta o marcador depois do ciclo
            reps = 0 # Reseta o contador de marcador
        
        start_timer()




window = tk.Tk()
window.title("Pomodoro")
window.config(padx=40, pady=20, bg="#1e1e2f")
# Impede o redimensionamento da janela para manter o layout
window.resizable(False, False)

# Título                    # Texto           Fonte     Tamanho  Formatação das letras e cores
label_timer = tk.Label(text="Pomodoro", font=("Arial", 32, "bold"), fg="#e0e0e0", bg="#1e1e2f")
label_timer.grid(column=0, row=0, columnspan=3, pady=10)

# Canvas com a imagem do tomate e o temporizador
canvas = tk.Canvas(width=200, height=200, bg="#1e1e2f", highlightthickness=0)
try:
    # Testa se tem a imagem do tomate na pasta
    tomate_img = tk.PhotoImage(file="TOMATEEE.png")
    canvas.create_image(100, 100, image=tomate_img)
except tk.TclError:
    print("Arquivo 'TOMATEEE.png' não encontrado. O timer funcionará com um tomate imaginário agora.")
    canvas.create_oval(10, 10, 190, 190, fill="#d62828", outline="") # faz o tomate imaginario

timer_text = canvas.create_text(100, 110, text="00:00", fill="white", font=("Arial", 22, "bold"))
canvas.grid(column=0, row=1, columnspan=3, pady=10)

# Marcas de progresso do ciclo (✔)
marcadores_label = tk.Label(fg="#00a64d", bg="#1e1e2f", font=("Arial", 14, "bold"))
marcadores_label.grid(column=0, row=2, columnspan=3, pady=5)

# botões de controle
botao_comeco = tk.Button(text="Start", command=start_timer, font=("Arial", 12, "bold"), bg="#00a64d", fg="white", width=10, relief="flat")
botao_comeco.grid(column=0, row=3, pady=10, padx=5, sticky="e")

reset_button = tk.Button(text="Reset", command=reset_timer, font=("Arial", 12, "bold"), bg="#d62828", fg="white", width=10, relief="flat")
reset_button.grid(column=2, row=3, pady=10, padx=5, sticky="w")


# informações adicionais
info_frame = tk.Frame(bg="#1e1e2f")
info_frame.grid(column=0, row=4, columnspan=3, pady=15)

# Texto dos ciclos 
ciclos_label = tk.Label(info_frame, text="Ciclos: 0", fg="#e0e0e0", bg="#1e1e2f", font=("Arial", 12, "bold"))
ciclos_label.pack(side="left", padx=20)

# Texto do tempo total, timer
cronometro_total_label = tk.Label(info_frame, text="Tempo Total: 00:00:00", fg="#e0e0e0", bg="#1e1e2f", font=("Arial", 12, "bold"))
cronometro_total_label.pack(side="right", padx=20)


window.mainloop()
